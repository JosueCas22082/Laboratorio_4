
Prelab 4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  0000024c  000002e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000024c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800110  00800110  000002f0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000320  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000360  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000855  00000000  00000000  000003b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006fa  00000000  00000000  00000c05  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003ef  00000000  00000000  000012ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c0  00000000  00000000  000016f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000040b  00000000  00000000  000017b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000149  00000000  00000000  00001bbb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001d04  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e4       	ldi	r30, 0x4C	; 76
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 31       	cpi	r26, 0x13	; 19
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 ba 00 	call	0x174	; 0x174 <main>
  9e:	0c 94 24 01 	jmp	0x248	; 0x248 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setup>:
		}
	}
}

void setup(void){
	UCSR0B = 0;		// DESABILITA TX Y RX
  a6:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	DDRB = 255;		// PUERTO B COMO SALIDA
  aa:	8f ef       	ldi	r24, 0xFF	; 255
  ac:	84 b9       	out	0x04, r24	; 4
	DDRD = 255;		// PUERTO D COMO SALIDA
  ae:	8a b9       	out	0x0a, r24	; 10
	PORTC = 6;		// PIN PC0 Y PC1 PULL-UP
  b0:	86 e0       	ldi	r24, 0x06	; 6
  b2:	88 b9       	out	0x08, r24	; 8
	DDRC = 248;		// PIN PC0, PC1 Y PC2 COMO ENTRADA
  b4:	88 ef       	ldi	r24, 0xF8	; 248
  b6:	87 b9       	out	0x07, r24	; 7
	
	// VALORES INICIALES
	PORTB = 0;
  b8:	15 b8       	out	0x05, r1	; 5
	PORTD = 0;
  ba:	1b b8       	out	0x0b, r1	; 11
	PORTC |= (1 << PORTC3);
  bc:	88 b1       	in	r24, 0x08	; 8
  be:	88 60       	ori	r24, 0x08	; 8
  c0:	88 b9       	out	0x08, r24	; 8
	PORTC &=~(1 << PORTC4);
  c2:	88 b1       	in	r24, 0x08	; 8
  c4:	8f 7e       	andi	r24, 0xEF	; 239
  c6:	88 b9       	out	0x08, r24	; 8
  c8:	08 95       	ret

000000ca <initADC>:
}

void initADC(void){
	ADMUX = 0;					// ADC0
  ca:	ec e7       	ldi	r30, 0x7C	; 124
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	10 82       	st	Z, r1
	ADMUX |= (1 << REFS0);		// VREF = AVCC
  d0:	80 81       	ld	r24, Z
  d2:	80 64       	ori	r24, 0x40	; 64
  d4:	80 83       	st	Z, r24
	ADMUX &= ~(1 << REFS1);		// VREF = AVCC
  d6:	80 81       	ld	r24, Z
  d8:	8f 77       	andi	r24, 0x7F	; 127
  da:	80 83       	st	Z, r24
	ADMUX |= (1 << ADLAR);		// JUSTIFICACION A LA DERECHA
  dc:	80 81       	ld	r24, Z
  de:	80 62       	ori	r24, 0x20	; 32
  e0:	80 83       	st	Z, r24
	
	ADCSRA = 0;
  e2:	ea e7       	ldi	r30, 0x7A	; 122
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	10 82       	st	Z, r1
	ADCSRA |= (1 << ADEN);		// ENCIENDER EL ADC
  e8:	80 81       	ld	r24, Z
  ea:	80 68       	ori	r24, 0x80	; 128
  ec:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADIE);		// HABILITAR ISR ADC
  ee:	80 81       	ld	r24, Z
  f0:	88 60       	ori	r24, 0x08	; 8
  f2:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS0);
  f4:	80 81       	ld	r24, Z
  f6:	81 60       	ori	r24, 0x01	; 1
  f8:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS1);
  fa:	80 81       	ld	r24, Z
  fc:	82 60       	ori	r24, 0x02	; 2
  fe:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS2);		// PRESCALES 128 -> 16M = 125kHz
 100:	80 81       	ld	r24, Z
 102:	84 60       	ori	r24, 0x04	; 4
 104:	80 83       	st	Z, r24
	
	DIDR0 |= (1 << ADC0D);		// DESABILITAR LA ENTRADA DIGITAL PC0
 106:	ee e7       	ldi	r30, 0x7E	; 126
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	81 60       	ori	r24, 0x01	; 1
 10e:	80 83       	st	Z, r24
 110:	08 95       	ret

00000112 <initTimer0>:
}

void initTimer0(void){
	TCCR0A = 0;		//MODO NORMAL
 112:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 5;		//PRESCALER
 114:	85 e0       	ldi	r24, 0x05	; 5
 116:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = 1;		//HABILITA TOIE0
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	TCNT0 = 99;		//VALOR INICIAL
 11e:	83 e6       	ldi	r24, 0x63	; 99
 120:	86 bd       	out	0x26, r24	; 38
 122:	08 95       	ret

00000124 <buton>:
}

void buton(void){
	if ((PINC & (1 << PINC1)) == 0){
 124:	31 99       	sbic	0x06, 1	; 6
 126:	10 c0       	rjmp	.+32     	; 0x148 <buton+0x24>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 128:	2f ef       	ldi	r18, 0xFF	; 255
 12a:	83 ec       	ldi	r24, 0xC3	; 195
 12c:	99 e0       	ldi	r25, 0x09	; 9
 12e:	21 50       	subi	r18, 0x01	; 1
 130:	80 40       	sbci	r24, 0x00	; 0
 132:	90 40       	sbci	r25, 0x00	; 0
 134:	e1 f7       	brne	.-8      	; 0x12e <buton+0xa>
 136:	00 c0       	rjmp	.+0      	; 0x138 <buton+0x14>
 138:	00 00       	nop
		_delay_ms(200);					//VALIDA LA PULSACION
		if ((PINC & (1 << PINC1)) == 2){
 13a:	31 9b       	sbis	0x06, 1	; 6
 13c:	05 c0       	rjmp	.+10     	; 0x148 <buton+0x24>
			CONT++;						//INCREMENTA
 13e:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <CONT>
 142:	8f 5f       	subi	r24, 0xFF	; 255
 144:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <CONT>
			}else{CONT = CONT;}
		}
		if ((PINC & (1 << PINC2)) == 0)	{
 148:	32 99       	sbic	0x06, 2	; 6
 14a:	10 c0       	rjmp	.+32     	; 0x16c <buton+0x48>
 14c:	2f ef       	ldi	r18, 0xFF	; 255
 14e:	83 ec       	ldi	r24, 0xC3	; 195
 150:	99 e0       	ldi	r25, 0x09	; 9
 152:	21 50       	subi	r18, 0x01	; 1
 154:	80 40       	sbci	r24, 0x00	; 0
 156:	90 40       	sbci	r25, 0x00	; 0
 158:	e1 f7       	brne	.-8      	; 0x152 <buton+0x2e>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <buton+0x38>
 15c:	00 00       	nop
			_delay_ms(200);					//VALIDA LA PULSACION
			if ((PINC & (1 << PINC2)) == 4){
 15e:	32 9b       	sbis	0x06, 2	; 6
 160:	05 c0       	rjmp	.+10     	; 0x16c <buton+0x48>
				CONT--;						//DECREMENTA
 162:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <CONT>
 166:	81 50       	subi	r24, 0x01	; 1
 168:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <CONT>
				}else{CONT = CONT;}
			}
			PORTB = CONT;
 16c:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <CONT>
 170:	85 b9       	out	0x05, r24	; 5
 172:	08 95       	ret

00000174 <main>:
void setup(void);
void buton(void);

int main(void)
{
	cli();
 174:	f8 94       	cli
	setup();
 176:	0e 94 53 00 	call	0xa6	; 0xa6 <setup>
	initADC();
 17a:	0e 94 65 00 	call	0xca	; 0xca <initADC>
	initTimer0();
 17e:	0e 94 89 00 	call	0x112	; 0x112 <initTimer0>
	sei();
 182:	78 94       	sei
	while (1)
	{
		//FUNCION DE BOTON
		buton();
 184:	0e 94 92 00 	call	0x124	; 0x124 <buton>
		//COMPARACION ENTRE CONTADOR Y ADC
		if (CONT == ADCH){
 188:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 18c:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <CONT>
 190:	98 13       	cpse	r25, r24
 192:	04 c0       	rjmp	.+8      	; 0x19c <main+0x28>
			PORTC |= (1 << PORTC5); //SI SON IGUALES
 194:	88 b1       	in	r24, 0x08	; 8
 196:	80 62       	ori	r24, 0x20	; 32
 198:	88 b9       	out	0x08, r24	; 8
 19a:	f4 cf       	rjmp	.-24     	; 0x184 <main+0x10>
			}else{
			PORTC &=~(1 << PORTC5);	//SI NO SON IGUALES
 19c:	88 b1       	in	r24, 0x08	; 8
 19e:	8f 7d       	andi	r24, 0xDF	; 223
 1a0:	88 b9       	out	0x08, r24	; 8
 1a2:	f0 cf       	rjmp	.-32     	; 0x184 <main+0x10>

000001a4 <__vector_21>:
				}else{CONT = CONT;}
			}
			PORTB = CONT;
		}

		ISR(ADC_vect){
 1a4:	1f 92       	push	r1
 1a6:	0f 92       	push	r0
 1a8:	0f b6       	in	r0, 0x3f	; 63
 1aa:	0f 92       	push	r0
 1ac:	11 24       	eor	r1, r1
 1ae:	8f 93       	push	r24
 1b0:	ef 93       	push	r30
 1b2:	ff 93       	push	r31
			D1 = (ADCH & 15);		//NIBLE BAJO
 1b4:	e9 e7       	ldi	r30, 0x79	; 121
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	80 81       	ld	r24, Z
 1ba:	8f 70       	andi	r24, 0x0F	; 15
 1bc:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <D1>
			D2 = (ADCH & 240);
 1c0:	80 81       	ld	r24, Z
			D2 = D2 >> 4;			//NIBLE BAJO
 1c2:	82 95       	swap	r24
 1c4:	8f 70       	andi	r24, 0x0F	; 15
 1c6:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
			ADCSRA |= (1 << ADIF);	//LIMPIA LA BANDERA
 1ca:	ea e7       	ldi	r30, 0x7A	; 122
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	80 81       	ld	r24, Z
 1d0:	80 61       	ori	r24, 0x10	; 16
 1d2:	80 83       	st	Z, r24
		}
 1d4:	ff 91       	pop	r31
 1d6:	ef 91       	pop	r30
 1d8:	8f 91       	pop	r24
 1da:	0f 90       	pop	r0
 1dc:	0f be       	out	0x3f, r0	; 63
 1de:	0f 90       	pop	r0
 1e0:	1f 90       	pop	r1
 1e2:	18 95       	reti

000001e4 <__vector_16>:

		ISR(TIMER0_OVF_vect){
 1e4:	1f 92       	push	r1
 1e6:	0f 92       	push	r0
 1e8:	0f b6       	in	r0, 0x3f	; 63
 1ea:	0f 92       	push	r0
 1ec:	11 24       	eor	r1, r1
 1ee:	8f 93       	push	r24
 1f0:	9f 93       	push	r25
 1f2:	ef 93       	push	r30
 1f4:	ff 93       	push	r31
			ADCSRA |= (1 << ADSC);			//INICIA EL ADC
 1f6:	ea e7       	ldi	r30, 0x7A	; 122
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	80 81       	ld	r24, Z
 1fc:	80 64       	ori	r24, 0x40	; 64
 1fe:	80 83       	st	Z, r24
			
			PORTC ^= (1 << PORTC3);			//CAMBIA EL VALOR PC3
 200:	98 b1       	in	r25, 0x08	; 8
 202:	88 e0       	ldi	r24, 0x08	; 8
 204:	89 27       	eor	r24, r25
 206:	88 b9       	out	0x08, r24	; 8
			PORTC ^= (1 << PORTC4);			//CAMBIA EL VALOR PC4
 208:	98 b1       	in	r25, 0x08	; 8
 20a:	80 e1       	ldi	r24, 0x10	; 16
 20c:	89 27       	eor	r24, r25
 20e:	88 b9       	out	0x08, r24	; 8
			if ((PORTC & (1 << PINC3)) == 8){
 210:	43 9b       	sbis	0x08, 3	; 8
 212:	08 c0       	rjmp	.+16     	; 0x224 <__vector_16+0x40>
				PORTD = DISPLAY[D1];		//DISPLAY 1
 214:	e0 91 11 01 	lds	r30, 0x0111	; 0x800111 <D1>
 218:	f0 e0       	ldi	r31, 0x00	; 0
 21a:	e0 50       	subi	r30, 0x00	; 0
 21c:	ff 4f       	sbci	r31, 0xFF	; 255
 21e:	80 81       	ld	r24, Z
 220:	8b b9       	out	0x0b, r24	; 11
 222:	07 c0       	rjmp	.+14     	; 0x232 <__vector_16+0x4e>
				}else{
				PORTD = DISPLAY[D2];		//DISPLAY 2
 224:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <__data_end>
 228:	f0 e0       	ldi	r31, 0x00	; 0
 22a:	e0 50       	subi	r30, 0x00	; 0
 22c:	ff 4f       	sbci	r31, 0xFF	; 255
 22e:	80 81       	ld	r24, Z
 230:	8b b9       	out	0x0b, r24	; 11
			}
			TCNT0 = 99;						//VALOR INICIAL
 232:	83 e6       	ldi	r24, 0x63	; 99
 234:	86 bd       	out	0x26, r24	; 38
 236:	ff 91       	pop	r31
 238:	ef 91       	pop	r30
 23a:	9f 91       	pop	r25
 23c:	8f 91       	pop	r24
 23e:	0f 90       	pop	r0
 240:	0f be       	out	0x3f, r0	; 63
 242:	0f 90       	pop	r0
 244:	1f 90       	pop	r1
 246:	18 95       	reti

00000248 <_exit>:
 248:	f8 94       	cli

0000024a <__stop_program>:
 24a:	ff cf       	rjmp	.-2      	; 0x24a <__stop_program>
